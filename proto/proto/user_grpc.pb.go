// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: user.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrackActivityClient is the client API for TrackActivity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackActivityClient interface {
	Add(ctx context.Context, in *AddUsersrequest, opts ...grpc.CallOption) (*AddUsersresponse, error)
	IsDone(ctx context.Context, in *UpdateActivityRequest, opts ...grpc.CallOption) (*UpdateActivityResponse, error)
	IsValid(ctx context.Context, in *UpdateActivityRequest, opts ...grpc.CallOption) (*UpdateActivityResponse, error)
}

type trackActivityClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackActivityClient(cc grpc.ClientConnInterface) TrackActivityClient {
	return &trackActivityClient{cc}
}

func (c *trackActivityClient) Add(ctx context.Context, in *AddUsersrequest, opts ...grpc.CallOption) (*AddUsersresponse, error) {
	out := new(AddUsersresponse)
	err := c.cc.Invoke(ctx, "/user_activity_logger.TrackActivity/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackActivityClient) IsDone(ctx context.Context, in *UpdateActivityRequest, opts ...grpc.CallOption) (*UpdateActivityResponse, error) {
	out := new(UpdateActivityResponse)
	err := c.cc.Invoke(ctx, "/user_activity_logger.TrackActivity/isDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackActivityClient) IsValid(ctx context.Context, in *UpdateActivityRequest, opts ...grpc.CallOption) (*UpdateActivityResponse, error) {
	out := new(UpdateActivityResponse)
	err := c.cc.Invoke(ctx, "/user_activity_logger.TrackActivity/isValid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackActivityServer is the server API for TrackActivity service.
// All implementations must embed UnimplementedTrackActivityServer
// for forward compatibility
type TrackActivityServer interface {
	Add(context.Context, *AddUsersrequest) (*AddUsersresponse, error)
	IsDone(context.Context, *UpdateActivityRequest) (*UpdateActivityResponse, error)
	IsValid(context.Context, *UpdateActivityRequest) (*UpdateActivityResponse, error)
	mustEmbedUnimplementedTrackActivityServer()
}

// UnimplementedTrackActivityServer must be embedded to have forward compatible implementations.
type UnimplementedTrackActivityServer struct {
}

func (UnimplementedTrackActivityServer) Add(context.Context, *AddUsersrequest) (*AddUsersresponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedTrackActivityServer) IsDone(context.Context, *UpdateActivityRequest) (*UpdateActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDone not implemented")
}
func (UnimplementedTrackActivityServer) IsValid(context.Context, *UpdateActivityRequest) (*UpdateActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsValid not implemented")
}
func (UnimplementedTrackActivityServer) mustEmbedUnimplementedTrackActivityServer() {}

// UnsafeTrackActivityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackActivityServer will
// result in compilation errors.
type UnsafeTrackActivityServer interface {
	mustEmbedUnimplementedTrackActivityServer()
}

func RegisterTrackActivityServer(s grpc.ServiceRegistrar, srv TrackActivityServer) {
	s.RegisterService(&TrackActivity_ServiceDesc, srv)
}

func _TrackActivity_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUsersrequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackActivityServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_activity_logger.TrackActivity/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackActivityServer).Add(ctx, req.(*AddUsersrequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackActivity_IsDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackActivityServer).IsDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_activity_logger.TrackActivity/isDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackActivityServer).IsDone(ctx, req.(*UpdateActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackActivity_IsValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackActivityServer).IsValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_activity_logger.TrackActivity/isValid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackActivityServer).IsValid(ctx, req.(*UpdateActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackActivity_ServiceDesc is the grpc.ServiceDesc for TrackActivity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackActivity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_activity_logger.TrackActivity",
	HandlerType: (*TrackActivityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _TrackActivity_Add_Handler,
		},
		{
			MethodName: "isDone",
			Handler:    _TrackActivity_IsDone_Handler,
		},
		{
			MethodName: "isValid",
			Handler:    _TrackActivity_IsValid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
